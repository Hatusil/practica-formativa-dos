version: '3.8'
services:
  # Servicio para la aplicación web utilizando la imagen de Docker Hub
  app:
    image: tuusuario/mi-app-web:1.0 # Cambiar por tu usuario de Docker Hub
    container_name: mi-app-web
    ports:
      - "8080:80" # Mapeo del puerto 8080 del host al 80 del contenedor
    volumes:
      - php_logs:/var/log/php # Volumen para los logs de PHP
    depends_on:
      db:
        condition: service_healthy # Espera a que el servicio de MySQL esté saludable
    networks:
      - mi-red-app
    restart: unless-stopped # Reinicia el contenedor automáticamente si falla

  # Servicio para la base de datos MySQL
  db:
    image: mysql:8.0
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: mipassword
      MYSQL_DATABASE: mibasededatos
      MYSQL_USER: usuario
      MYSQL_PASSWORD: password
    ports:
      - "3306:3306" # Puerto para conectar al servidor MySQL
    volumes:
      - mysql_data:/var/lib/mysql # Volumen para persistencia de datos
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # Script inicial para crear la estructura
    networks:
      - mi-red-app
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p$$MYSQL_ROOT_PASSWORD"]
      interval: 5s
      timeout: 5s
      retries: 20

# Definición de volúmenes
volumes:
  mysql_data: # Volumen para persistir los datos de MySQL
  php_logs: # Volumen para persistir los logs de PHP

# Definición de redes
networks:
  mi-red-app:
    driver: bridge